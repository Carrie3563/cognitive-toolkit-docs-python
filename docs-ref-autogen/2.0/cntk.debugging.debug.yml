#YamlMime:PythonReference
api_name: []
items:
- children:
  - cntk.debugging.debug.debug_model
  - cntk.debugging.debug.save_as_legacy_model
  - cntk.debugging.debug.set_checked_mode
  - cntk.debugging.debug.set_computation_network_trace_level
  fullName: cntk.debugging.debug
  langs:
  - python
  module: cntk.debugging.debug
  name: debug
  source:
    id: debug
    path: /bindings/python\cntk\debugging\debug.py
    remote:
      branch: master
      path: /bindings/python\cntk\debugging\debug.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 0
  summary: "In order to debug a graph one simply needs to wrap the root node as follows::\n\
    \n    # ... setting up the model in z     from cntk.debugging import debug_model\
    \     z = debug_model(z)\n\nThen, when ``z`` is evaluated or trained (i.e. when\
    \ either :meth:`~cntk.ops.functions.Function.forward` or :meth:`~cntk.ops.functions.Function.backward`\
    \ is called, you will see the following command-line interface::\n\n    ===================================\
    \ forward  ===================================     Parameter node with uid='Parameter28'\
    \ shape=[](2,)     [CNTK forward] >>> help         Commands:         n - execute\
    \ the next node         n <number> - execute the next <number> nodes\n\n     \
    \   u f - execute until forward pass (like 'n' when already in forward pass) \
    \        u b - execute until backward pass (like 'n' when already in backward\
    \ pass)         u name - execute until a node with that name is hit         u\
    \ <lambda> - execute until the lambda expression is True. Examples:          \
    \            Until a Times node is hit:                          lambda arg, node:\
    \ node.op_name == 'Times'                      Until a node is hit that has 3\
    \ dimensions:                          lambda arg, node: len(node.shape) == 3\
    \                      Until the variance of the input exceeds 1 (np = numpy):\
    \                          lambda arg, node: np.var(arg) > 1\n\n        c - execute\
    \ until end         p - print input (forward) or root gradients (backward)   \
    \      d - drop into a pdb shell         q - quit\n\n    [CNTK backward] >>> n\n\
    \n    Times node with uid='Times29' shape=[*,*](2,)     [CNTK forward] >>> n \
    \    =================================== backward ===================================\
    \     Times node with uid='Times29' shape=[*,*](2,)     [CNTK backward] >>> p\
    \     State: None     Root gradients:     [[[-0.79412955  0.79412955]]      [[-0.79412955\
    \  0.79412955]]      [[ 0.20587046 -0.20587045]]      [[ 0.20587046 -0.20587045]]\
    \      [[ 0.20587046 -0.20587045]]      [[ 0.20587046 -0.20587045]]      [[-0.79412955\
    \  0.79412955]]      [[ 0.20587046 -0.20587045]]      [[ 0.20587039 -0.20587039]]\
    \      [[-0.79412961  0.79412961]]]\n\nAt every stop the following information\
    \ is given:  * Forward or backward pass  * Node type (e.g. 'Times')  * Name if\
    \ given, otherwise it is omitted  * uid, which is a unique reference within the\
    \ graph  * shape having the format [dynamic axis](static axes). E.g. ``[*,*](2,)``\
    \    means that the node's output has two dynamic axes (batch and sequence) and\
    \    one static axis (2 dimensions)"
  type: module
  uid: cntk.debugging.debug
- fullName: cntk.debugging.debug.debug_model
  langs:
  - python
  module: cntk.debugging.debug
  name: debug_model
  source:
    id: debug_model
    path: /bindings/python\cntk\debugging\debug.py
    remote:
      branch: master
      path: /bindings/python\cntk\debugging\debug.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 404
  summary: Returns a cloned model that has debug nodes inserted everywhere. When the
    graph is evaluated or trained, those nodes will allow to inspect the graph.
  syntax:
    content: debug_model(model, in_stream=<_io.TextIOWrapper name='<stdin>' mode='r'
      encoding='cp936'>, out_stream=<colorama.ansitowin32.StreamWrapper object at
      0x0000020A719294A8>, exit_func=<built-in function exit>)
    parameters:
    - description: root node until which the nodes are to be debugged
      id: model
      type:
      - root node
    - description: '*readline()* will be called on it to obtain user input'
      id: in_stream
      type:
      - object behaving like sys.stdin, default stdin
    - description: '*write()* and *flush()* will be called on it to output debug info
        to the user'
      id: out_stream
      type:
      - object behaving like sys.stdout, default stdout
    - description: callable that takes an exit code and is called, when the user exits
        the debugging process
      id: exit_func
      type:
      - callable, default sys.exit
    return:
      description: a clone of the model that has debugging enabled
  type: function
  uid: cntk.debugging.debug.debug_model
- fullName: cntk.debugging.debug.save_as_legacy_model
  langs:
  - python
  module: cntk.debugging.debug
  name: save_as_legacy_model
  source:
    id: save_as_legacy_model
    path: /bindings/python\cntk\debugging\debug.py
    remote:
      branch: master
      path: /bindings/python\cntk\debugging\debug.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 86
  summary: Save the network of `root_op` in `filename`. For debugging purposes only,
    very likely to be deprecated in the future.
  syntax:
    content: save_as_legacy_model(root_op, filename)
    parameters:
    - description: op of the graph to save
      id: root_op
      type:
      - '@cntk.ops.functions.Function'
    - description: filename to store the model in.
      id: filename
      type:
      - str
  type: function
  uid: cntk.debugging.debug.save_as_legacy_model
- fullName: cntk.debugging.debug.set_checked_mode
  langs:
  - python
  module: cntk.debugging.debug
  name: set_checked_mode
  source:
    id: set_checked_mode
    path: /bindings/python\cntk\debugging\debug.py
    remote:
      branch: master
      path: /bindings/python\cntk\debugging\debug.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 109
  summary: "   Checked mode enables additional runtime verification such as:\n   \
    \   * Tracking NaN occurences in sequence gaps.\n\n      * Function graph verification\
    \ after binding of free static axes to actual values at runtime\n\n   Enabling\
    \ checked mode incurs additional runtime costs and is meant to be used as a debugging\
    \ aid."
  syntax:
    content: set_checked_mode(enable)
    parameters:
    - description: whether to enable checked mode (with performance impact)
      id: enable
      type:
      - bool
  type: function
  uid: cntk.debugging.debug.set_checked_mode
- fullName: cntk.debugging.debug.set_computation_network_trace_level
  langs:
  - python
  module: cntk.debugging.debug
  name: set_computation_network_trace_level
  source:
    id: set_computation_network_trace_level
    path: /bindings/python\cntk\debugging\debug.py
    remote:
      branch: master
      path: /bindings/python\cntk\debugging\debug.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 123
  summary: "Set trace level to the computation network. Currently supported values:\n\
    \   0\n      turn off trace\n\n   1\n      output nodes' dimensions and some other\
    \ static info\n\n   1000\n      output each node's abs sum of elements in its\
    \ value matrix for every forward/backward\n\n   1000000\n      output each node's\
    \ full matrix for every forward/backward"
  syntax:
    content: set_computation_network_trace_level(level)
    parameters:
    - description: trace level
      id: level
      type:
      - int
  type: function
  uid: cntk.debugging.debug.set_computation_network_trace_level
references:
- fullName: cntk.debugging.debug.debug_model
  isExternal: false
  name: debug_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.debug_model
- fullName: cntk.debugging.debug.save_as_legacy_model
  isExternal: false
  name: save_as_legacy_model
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.save_as_legacy_model
- fullName: cntk.debugging.debug.set_checked_mode
  isExternal: false
  name: set_checked_mode
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_checked_mode
- fullName: cntk.debugging.debug.set_computation_network_trace_level
  isExternal: false
  name: set_computation_network_trace_level
  parent: cntk.debugging.debug
  uid: cntk.debugging.debug.set_computation_network_trace_level
