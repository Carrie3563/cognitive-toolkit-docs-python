api_name: []
items:
- _type: module
  children:
  - cntk.contrib.crosstalk.Conv2DArgs
  - cntk.contrib.crosstalk.Conv2DAttr
  - cntk.contrib.crosstalk.Crosstalk
  - cntk.contrib.crosstalk.EmbedAttr
  - cntk.contrib.crosstalk.RnnArgs
  - cntk.contrib.crosstalk.RnnAttr
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk
  summary: 'Crosstalk (Contrib) for debugging/conversion among toolkits


    It is the utility to manage variables for debugging/conversion across scripts
    in different toolkits.

    With crosstalk, user can define named watch points to variables or parameters,
    and setting up a work dir.

    Then crosstalk can save/load variables to corresponding files from python debugger,
    and compare values using numpy.

    '
  type: Namespace
  uid: cntk.contrib.crosstalk
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Global
  summary: Proxy object to hold module level functions
  type: Class
  uid: cntk.contrib.crosstalk.Global
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Conv2DArgs
  summary: "Args inside Conv2D variable. Conv2D output is in NCHW format\n\nW\n  \
    \  The numpy ndarray of filter parameter in shape (num_filters, filter_w, filter_h,))\n\
    \nb\n    The numpy ndarray of bias parameter in shape (num_filters,)\n"
  type: Class
  uid: cntk.contrib.crosstalk.Conv2DArgs
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Conv2DAttr
  summary: "Attribute for Conv2D variable\n\nfilter_shape\n    The filter shape\n\n\
    num_filters\n    Number of filters\n"
  type: Class
  uid: cntk.contrib.crosstalk.Conv2DAttr
- _type: class
  children:
  - cntk.contrib.crosstalk.Crosstalk.assign
  - cntk.contrib.crosstalk.Crosstalk.compare
  - cntk.contrib.crosstalk.Crosstalk.fetch
  - cntk.contrib.crosstalk.Crosstalk.load
  - cntk.contrib.crosstalk.Crosstalk.load_raw_value
  - cntk.contrib.crosstalk.Crosstalk.next_pass
  - cntk.contrib.crosstalk.Crosstalk.register_funcs
  - cntk.contrib.crosstalk.Crosstalk.reset
  - cntk.contrib.crosstalk.Crosstalk.save
  - cntk.contrib.crosstalk.Crosstalk.save_all
  - cntk.contrib.crosstalk.Crosstalk.set_workdir
  - cntk.contrib.crosstalk.Crosstalk.watch
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk
  summary: 'Base class of Crosstalk.

    Please refer to crosstalk unittests for examples of how to exchange/compare values
    between different toolkits.

    '
  type: Class
  uid: cntk.contrib.crosstalk.Crosstalk
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.assign
  summary: 'Set value to var, with option to load from working directory


    :param name: Name of the variable to assign

    :type name: `str`

    :param value: Numpy ndarray of dict of numpy ndarray data to assign to the variable

    :param load: True to Load the data from working directory with the matching name,
    instead of using value. value has to be None when load=True

    :type load: `bool`

    :param load_name: None to load data with the same name, otherwise load with overrided
    load_name

    :type load_name: `str`

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.assign
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.compare
  summary: 'Compare var with name to value in file in working directory


    :param name: Name of the variable to compare

    :type name: `str`

    :param compare_name: Compare to file with compare_name if specified

    :type compare_name: `str`

    :param rtol: The relative tolerance parameter, as in numpy.isclose()

    :type rtol: `float`

    :param atol: The absolute tolerance parameter, as in numpy.isclose()

    :type atol: `float`

    :param equal_nan: Whether to compare NaNs as equal, as in numpy.isclose()

    :type equal_nan: `bool`

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.compare
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.fetch
  summary: 'Fetch/evaluate var with name and optionally save to working directory


    :param name: Name of the variable to fetch

    :type name: `str`

    :param save: Save the data to working directory

    :type save: `bool`

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.fetch
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.load
  summary: 'Load variables in list of names


    :param names: List of `str` of variable names to load

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.load
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.load_raw_value
  summary: 'Load raw value from npy|pkl file in working directory


    :param name: Name of the file to load

    :type name: `str`


    :returns: loaded data in numpy ndarray or dict of numpy ndarray

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.load_raw_value
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.next_pass
  summary: 'Bump up passes so save won''t overwrite existing files

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.next_pass
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.register_funcs
  summary: 'Register setter/getter functions for a given variable type


    :param var_type: Type of the variable

    :param setter: Lambda function to set value

    :param getter: Lambda function to get value

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.register_funcs
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.reset
  summary: 'Reset all variables and passes, setter/getter functions for variable types
    are kept

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.reset
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.save
  summary: 'Save variables in list of names


    :param names: List of `str` of variable names to save

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.save
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.save_all
  summary: 'Save all variables

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.save_all
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.set_workdir
  summary: 'Set up a working directory for save/load numpy values(.npy) or python
    data (.pkl)


    :param dir: Working directory

    :type dir: `str`

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.set_workdir
- _type: method
  class: cntk.contrib.crosstalk.Crosstalk
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.Crosstalk.watch
  summary: 'Add variables to watch with a unique name.


    :param var: Variable to watch. The type is toolkit specific

    :param name: A unique name of the watched variable

    :type name: `str`

    :param var_type: Variable type for set/get value callback. would be type of var
    if None is specified

    :param attr: attributes for the variable that would be used when getting/setting
    values. Could be one of Conv2DAttr/EmbedAttr/RnnAttr

    '
  type: Method
  uid: cntk.contrib.crosstalk.Crosstalk.watch
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.EmbedAttr
  summary: "Attribute for embedding variable\n\ndict\n    The list of vocabulary of\
    \ the embedding\n\ninput_dim\n    The input dimension of the embedding\n"
  type: Class
  uid: cntk.contrib.crosstalk.EmbedAttr
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.RnnArgs
  summary: "Args inside RNN variable.\n\nfw_W\n    The numpy ndarray of input projection\
    \ parameter for RNN forward in shape (input_dim, num_gates * hidden_dim)\n\nfw_H\n\
    \    The numpy ndarray of hidden projection parameter for RNN forward in shape\
    \ (hidden_dim, num_gates * hidden_dim)\n\nfw_b\n    The numpy ndarray of bias\
    \ parameter for RNN forward in shape (num_gates * hidden_dim,)\n\nbw_W\n    The\
    \ numpy ndarray of input projection parameter for RNN backward in shape (input_dim,\
    \ num_gates * hidden_dim)\n\nbw_H\n    The numpy ndarray of hidden projection\
    \ parameter for RNN backward in shape (hidden_dim, num_gates * hidden_dim)\n\n\
    bw_b\n    The numpy ndarray of bias parameter for RNN backward in shape (num_gates\
    \ * hidden_dim,)\n"
  type: Class
  uid: cntk.contrib.crosstalk.RnnArgs
- _type: class
  children: []
  module: cntk.contrib.crosstalk
  name: cntk.contrib.crosstalk.RnnAttr
  summary: "Attribute for RNN variable\n\nbidirectional\n    True for bidirectional\
    \ RNN, False for unidirection. Currently only support bidirectional=True\n\nop_type\n\
    \    RNN cell type, currently only support 'lstm'\n\ninput_dim\n    Input dimension\n\
    \nhidden_dim\n    Hidden dimension in RNN cell\n\nforget_bias\n    forget gate\
    \ bias in LSTM\n"
  type: Class
  uid: cntk.contrib.crosstalk.RnnAttr
