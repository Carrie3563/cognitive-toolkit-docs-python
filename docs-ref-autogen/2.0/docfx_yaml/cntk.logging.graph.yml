api_name: []
items:
- _type: module
  children: []
  module: cntk.logging.graph
  name: cntk.logging.graph
  summary: ''
  type: Namespace
  uid: cntk.logging.graph
- _type: class
  children:
  - cntk.logging.graph.depth_first_search
  - cntk.logging.graph.find_all_with_name
  - cntk.logging.graph.find_by_name
  - cntk.logging.graph.get_node_outputs
  - cntk.logging.graph.plot
  module: cntk.logging.graph
  name: cntk.logging.graph.Global
  summary: Proxy object to hold module level functions
  type: Class
  uid: cntk.logging.graph.Global
- _type: function
  module: cntk.logging.graph
  name: cntk.logging.graph.depth_first_search
  summary: "Generic function that walks through the graph starting at ``root`` and\n\
    uses function ``visitor`` on each node to check whether it should be\nreturned.\n\
    \n:param root: the root to start the journey from\n:type root: :class:`~cntk.ops.functions.Function`\
    \ or :class:`~cntk.variables.Variable`\n:param visitor: function that takes a\
    \ node as\n                argument and returns ``True`` if that node should be\
    \ returned.\n:type visitor: Python function or lambda\n:param depth: how deep\
    \ into the block hierarchy the DFS\n              algorithm should go into. Set\
    \ to -1 for infinite depth.\n:type depth: int, default 0\n\n:returns: List of\
    \ functions, for which ``visitor`` was ``True``\n"
  type: Method
  uid: cntk.logging.graph.depth_first_search
- _type: function
  module: cntk.logging.graph
  name: cntk.logging.graph.find_all_with_name
  summary: "Finds functions in the graph starting from ``node`` and doing a depth-first\n\
    search.\n\n:param node: the node to start the journey from\n:type node: :class:`~cntk.ops.functions.Function`\
    \ or :class:`~cntk.variables.Variable`\n:param node_name: name for which we are\
    \ search nodes\n:type node_name: `str`\n:param depth: how deep into the block\
    \ hierarchy the DFS\n              algorithm should go into. Set to -1 for infinite\
    \ depth.\n:type depth: int, default 0\n\n:returns: List of primitive (or block)\
    \ functions having the specified name\n\n.. seealso::\n\n   :func:`~cntk.ops.functions.Function.find_all_with_name`\
    \ in class\n   :class:`~cntk.ops.functions.Function`.\n"
  type: Method
  uid: cntk.logging.graph.find_all_with_name
- _type: function
  module: cntk.logging.graph
  name: cntk.logging.graph.find_by_name
  summary: "Finds a function in the graph starting from ``node`` and doing a depth-first\n\
    search. It assumes that the name occurs only once.\n\n:param node: the node to\
    \ start the journey from\n:type node: :class:`~cntk.ops.functions.Function` or\
    \ :class:`~cntk.variables.Variable`\n:param node_name: name for which we are search\
    \ nodes\n:type node_name: `str`\n:param depth: how deep into the block hierarchy\
    \ the DFS\n              algorithm should go into. Set to -1 for infinite depth.\n\
    :type depth: int, default 0\n\n:returns: Primitive (or block) function having\
    \ the specified name\n\n.. seealso::\n\n   :func:`~cntk.ops.functions.Function.find_by_name`\
    \ in class\n   :class:`~cntk.ops.functions.Function`.\n"
  type: Method
  uid: cntk.logging.graph.find_by_name
- _type: function
  module: cntk.logging.graph
  name: cntk.logging.graph.get_node_outputs
  summary: 'Walks through every node of the graph starting at ``node``

    and returns a list of all node outputs.


    :param node: the node to start the journey from

    :type node: graph node


    :returns: A list of all node outputs

    '
  type: Method
  uid: cntk.logging.graph.get_node_outputs
- _type: function
  module: cntk.logging.graph
  name: cntk.logging.graph.plot
  summary: "Walks through every node of the graph starting at ``root``,\ncreates a\
    \ network graph, and returns a network description. If ``filename`` is\nspecified,\
    \ it outputs a DOT, PNG, PDF, or SVG file depending on the file name's suffix.\n\
    \nRequirements:\n\n * for DOT output: `pydot_ng <https://pypi.python.org/pypi/pydot-ng>`_\n\
    \ * for PNG, PDF, and SVG output: `pydot_ng <https://pypi.python.org/pypi/pydot-ng>`_\n\
    \   and `graphviz <http://graphviz.org>`_ (GraphViz executable has to be in the\
    \ system's PATH).\n\n:param node: the node to start the journey from\n:type node:\
    \ graph node\n:param filename: file with extension '.dot', 'png', 'pdf', or 'svg'\n\
    \                 to denote what format should be written. If `None` then nothing\n\
    \                 will be plotted, and the returned string can be used to debug\
    \ the graph.\n:type filename: `str`, default None\n\n:returns: `str` describing\
    \ the graph\n"
  type: Method
  uid: cntk.logging.graph.plot
