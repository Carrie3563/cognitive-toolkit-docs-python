api_name: []
items:
- _type: module
  children: []
  module: cntk.random
  name: cntk.random
  summary: ''
  type: Namespace
  uid: cntk.random
- _type: class
  children:
  - cntk.random.bernoulli
  - cntk.random.bernoulli_like
  - cntk.random.gumbel
  - cntk.random.gumbel_like
  - cntk.random.normal
  - cntk.random.normal_like
  - cntk.random.uniform
  - cntk.random.uniform_like
  module: cntk.random
  name: cntk.random.Global
  summary: Proxy object to hold module level functions
  type: Class
  uid: cntk.random.Global
- _type: function
  module: cntk.random
  name: cntk.random.bernoulli
  summary: "Generates samples from the Bernoulli distribution with success probability\
    \ `mean`.\n\n:param shape: shape of the output (entries are independent random\
    \ draws)\n:type shape: tuple\n:param dtype: data type. Default is np.float32.\n\
    :type dtype: np.float32 or np.float64\n:param mean: success probability\n:type\
    \ mean: float\n:param seed: pseudo random number generator seed (default: automatically\
    \ select a unique seed)\n:type seed: int\n:param name: the name of the Function\
    \ instance in the network\n:type name: str, optional\n\n:returns: :class:`~cntk.ops.functions.Function`\n\
    \n.. admonition:: Examples\n\n   >>> b = C.random.bernoulli((2,3), seed=98052)\n\
    \   >>> b.eval(device=C.cpu()) # explicitly setting cpu because this is tested\
    \ on multiple platforms; leave it unspecified in your code\n   array([[ 1.,  1.,\
    \  0.],\n          [ 1.,  0.,  0.]], dtype=float32)\n"
  type: Method
  uid: cntk.random.bernoulli
- _type: function
  module: cntk.random
  name: cntk.random.bernoulli_like
  summary: "Generates samples from the Bernoulli distribution with success probability\
    \ `mean`.\n\n:param x: cntk variable (input, output, parameter, or constant) from\
    \ which to copy the shape, data type, and dynamic axes.\n:param mean: success\
    \ probability\n:type mean: float\n:param seed: pseudo random number generator\
    \ seed (default: automatically select a unique seed)\n:type seed: int\n:param\
    \ name: the name of the Function instance in the network\n:type name: str, optional\n\
    \n:returns: :class:`~cntk.ops.functions.Function`\n\n.. admonition:: Examples\n\
    \n   >>> p = C.placeholder()\n   >>> bp = C.random.bernoulli_like(p, seed=98052)\n\
    \   >>> x = C.sequence.input_variable(1)\n   >>> bx = bp.replace_placeholders({p:x})\n\
    \   >>> x0 = np.zeros((1,3,1), dtype=np.float32)\n   >>> bx.eval({x:x0}, device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\n   [array([[ 1.],\n          [ 1.],\n         \
    \ [ 0.]], dtype=float32)]\n"
  type: Method
  uid: cntk.random.bernoulli_like
- _type: function
  module: cntk.random
  name: cntk.random.gumbel
  summary: "Generates samples from the Gumbel distribution with location `loc` and\
    \ scale `scale`.\n\n:param shape: shape of the output (entries are independent\
    \ random draws)\n:type shape: tuple\n:param dtype: data type. Default is np.float32.\n\
    :type dtype: np.float32 or np.float64\n:param loc: location of the distribution\n\
    :type loc: float\n:param scale: scale of the distribution\n:type scale: float\n\
    :param seed: pseudo random number generator seed (default: automatically select\
    \ a unique seed)\n:type seed: int\n:param name: the name of the Function instance\
    \ in the network\n:type name: str, optional\n\n:returns: :class:`~cntk.ops.functions.Function`\n\
    \n.. admonition:: Examples\n\n   >>> g = C.random.gumbel((2,3), seed=98052)\n\
    \   >>> g.eval(device=C.cpu()) # explicitly setting cpu because this is tested\
    \ on multiple platforms; leave it unspecified in your code\n   array([[-0.987713,\
    \ -0.522298,  0.425918],\n          [-1.019599,  5.435177,  1.586071]], dtype=float32)\n\
    \n.. seealso::\n\n   `The Gumbel-Max Trick\n   <https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/>`_.\n"
  type: Method
  uid: cntk.random.gumbel
- _type: function
  module: cntk.random
  name: cntk.random.gumbel_like
  summary: "Generates samples from the Gumbel distribution with location `loc` and\
    \ scale `scale`.\n\n:param x: cntk variable (input, output, parameter, or constant)\
    \ from which to copy the shape, data type, and dynamic axes.\n:param loc: location\
    \ of the distribution\n:type loc: float\n:param scale: scale of the distribution\n\
    :type scale: float\n:param seed: pseudo random number generator seed (default:\
    \ automatically select a unique seed)\n:type seed: int\n:param name: the name\
    \ of the Function instance in the network\n:type name: str, optional\n\n:returns:\
    \ :class:`~cntk.ops.functions.Function`\n\n.. admonition:: Examples\n\n   >>>\
    \ x = C.constant(np.zeros((2,3,4), dtype=np.float32))\n   >>> g = C.random.gumbel_like(x,\
    \ seed=98052)\n   >>> s = g.eval(device=C.cpu()) # explicitly setting cpu because\
    \ this is tested on multiple platforms; leave it unspecified in your code\n  \
    \ >>> np.round(s, 4)\n   array([[[-0.9877, -0.5223,  0.4259, -1.0196],\n     \
    \      [ 5.4352,  1.5861,  5.0608,  2.0668],\n           [-0.2135,  1.0139,  3.1217,\
    \ -1.4834]],\n   <BLANKLINE>\n          [[ 0.4507,  0.6325,  2.1682,  0.4463],\n\
    \           [-0.6583,  0.1147, -0.3144, -0.7925],\n           [ 1.9773, -0.3627,\
    \ -0.4566, -0.2368]]], dtype=float32)\n\n.. seealso::\n\n   `The Gumbel-Max Trick\n\
    \   <https://hips.seas.harvard.edu/blog/2013/04/06/the-gumbel-max-trick-for-discrete-distributions/>`_.\n"
  type: Method
  uid: cntk.random.gumbel_like
- _type: function
  module: cntk.random
  name: cntk.random.normal
  summary: "Generates samples from the normal distribution with mean `mean` and standard\
    \ deviation `scale`.\n\n:param shape: shape of the output (entries are independent\
    \ random draws)\n:type shape: tuple\n:param dtype: data type. Default is np.float32.\n\
    :type dtype: np.float32 or np.float64\n:param mean: mean of the distribution\n\
    :type mean: float\n:param scale: scale (standard deviation) of the distribution\n\
    :type scale: float\n:param seed: pseudo random number generator seed (default:\
    \ automatically select a unique seed)\n:type seed: int\n:param name: the name\
    \ of the Function instance in the network\n:type name: str, optional\n\n:returns:\
    \ :class:`~cntk.ops.functions.Function`\n\n.. admonition:: Examples\n\n   >>>\
    \ z = C.random.normal((2,3), seed=98052)\n   >>> z.eval(device=C.cpu()) # explicitly\
    \ setting cpu because this is tested on multiple platforms; leave it unspecified\
    \ in your code\n   array([[ 1.803254,  0.995395, -0.631974],\n          [-1.73672\
    \ ,  0.005615, -0.340025]], dtype=float32)\n"
  type: Method
  uid: cntk.random.normal
- _type: function
  module: cntk.random
  name: cntk.random.normal_like
  summary: "Generates samples from the normal distribution with mean `mean` and standard\
    \ deviation `scale`.\n\n:param x: cntk variable (input, output, parameter, or\
    \ constant) from which to copy the shape, data type, and dynamic axes.\n:param\
    \ mean: mean of the distribution\n:type mean: float\n:param scale: scale (standard\
    \ deviation) of the distribution\n:type scale: float\n:param seed: pseudo random\
    \ number generator seed (default: automatically select a unique seed)\n:type seed:\
    \ int\n:param name: the name of the Function instance in the network\n:type name:\
    \ str, optional\n\n:returns: :class:`~cntk.ops.functions.Function`\n\n.. admonition::\
    \ Examples\n\n   >>> x = C.parameter((2,3,4))\n   >>> z = C.random.normal_like(x,\
    \ seed=98052)\n   >>> z.eval(device=C.cpu()) # explicitly setting cpu because\
    \ this is tested on multiple platforms; leave it unspecified in your code\n  \
    \ array([[[ 1.803254,  0.995395, -0.631974, -1.73672 ],\n           [ 0.005615,\
    \ -0.340025, -0.011913, -0.236371],\n           [-1.207685, -0.495846,  0.037022,\
    \ -1.220596]],\n   <BLANKLINE>\n          [[ 0.872981,  0.654405, -0.111421, -0.544074],\n\
    \           [ 1.543746, -0.63555 , -1.072869, -0.379701],\n           [ 0.592069,\
    \ -1.035192,  1.679303, -0.391963]]], dtype=float32)\n"
  type: Method
  uid: cntk.random.normal_like
- _type: function
  module: cntk.random
  name: cntk.random.uniform
  summary: "Generates samples from the uniform distribution in the interval [`low`,`high`).\n\
    \n:param shape: shape of the output (entries are independent random draws)\n:type\
    \ shape: tuple\n:param dtype: data type. Default is np.float32.\n:type dtype:\
    \ np.float32 or np.float64\n:param low: lower end of the range of the random numbers\n\
    :type low: float\n:param high: upper end of the range of the random numbers\n\
    :type high: float\n:param seed: pseudo random number generator seed (default:\
    \ automatically select a unique seed)\n:type seed: int\n:param name: the name\
    \ of the Function instance in the network\n:type name: str, optional\n\n:returns:\
    \ :class:`~cntk.ops.functions.Function`\n\n.. admonition:: Examples\n\n   >>>\
    \ u = C.random.uniform((2,3), seed=98052)\n   >>> u.eval(device=C.cpu()) # explicitly\
    \ setting cpu because this is tested on multiple platforms; leave it unspecified\
    \ in your code\n   array([[ 0.931785,  0.814722,  0.479606],\n          [ 0.937468,\
    \  0.004351,  0.185131]], dtype=float32)\n"
  type: Method
  uid: cntk.random.uniform
- _type: function
  module: cntk.random
  name: cntk.random.uniform_like
  summary: "Generates samples from the uniform distribution in the interval [`low`,`high`).\n\
    \n:param x: cntk variable (input, output, parameter, or constant) from which to\
    \ copy the shape, data type, and dynamic axes.\n:param low: lower end of the range\
    \ of the random numbers\n:type low: float\n:param high: upper end of the range\
    \ of the random numbers\n:type high: float\n:param seed: pseudo random number\
    \ generator seed (default: automatically select a unique seed)\n:type seed: int\n\
    :param name: the name of the Function instance in the network\n:type name: str,\
    \ optional\n\n:returns: :class:`~cntk.ops.functions.Function`\n\n.. admonition::\
    \ Examples\n\n   >>> x = C.input_variable(4)\n   >>> x0 = np.zeros((3,4), dtype=np.float32)\n\
    \   >>> u = C.random.uniform_like(x, seed=98052)\n   >>> u.eval({x:x0}, device=C.cpu())\
    \ # explicitly setting cpu because this is tested on multiple platforms; leave\
    \ it unspecified in your code\n   array([[ 0.931785,  0.814722,  0.479606,  0.937468],\n\
    \          [ 0.004351,  0.185131,  0.00632 ,  0.118901],\n          [ 0.710054,\
    \  0.304273,  0.043126,  0.987818]], dtype=float32)\n"
  type: Method
  uid: cntk.random.uniform_like
