### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.layers.higher_order_layers.For
  - cntk.layers.higher_order_layers.LayerStack
  - cntk.layers.higher_order_layers.ResNetBlock
  - cntk.layers.higher_order_layers.Sequential
  - cntk.layers.higher_order_layers.SequentialClique
  fullName: cntk.layers.higher_order_layers
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: higher_order_layers
  source:
    id: higher_order_layers
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 0
  summary: 'higher_order_layers -- higher-order functions, like Sequential() and ResNetBlock().

    Note that sequential higher-order functions like Recurrence() are in sequence.py.

    '
  type: module
  uid: cntk.layers.higher_order_layers
- example:
  - "\n```\n\n>>> from cntk.layers import *\n>>> from cntk.ops import relu\n```\n\n\
    \n```\n\n>>> # stack of 3 Dense relu layers\n>>> model = For(range(3), lambda:\
    \ Dense(2000, activation=relu))\n```\n\n\n```\n\n>>> # version of the above that\
    \ has no activation for the last layer\n>>> model = For(range(3), lambda i: Dense(2000,\
    \ activation=relu if i < 2 else identity))\n```\n\n\n```\n\n>>> # complex example\
    \ that uses For() inside Sequential()\n>>> with default_options(activation=relu,\
    \ pad=True):  # default activation is relu\n...     model = Sequential([\n...\
    \          For(range(2), lambda : [\n...              Convolution2D((3,3), 64),\n\
    ...              Convolution2D((3,3), 64),\n...              MaxPooling((3,3),\
    \ strides=2)\n...          ]),\n...          Label('ndfeat'),              # name\
    \ this specific value\n...          For(range(2), lambda i: [     # this passes\
    \ a nested list to Sequential\n...              Dense([256,128][i]),      # layer\
    \ index i used to index into an array of parameters\n...              Dropout(0.5)\n\
    ...          ]),\n...          Label('hidden'),\n...          Dense(10, activation=None)\
    \    # activation parameter overrides default (which was set to relu)\n...   \
    \   ])\n>>> model.update_signature((3,32,32))      # RGB, 32 x 32 pixels\n>>>\
    \ model.ndfeat.shape                     # shape at top of convo/pooling pyramid\n\
    \    (64, 8, 8)\n>>> model.hidden.shape                     # shape before classifier\n\
    \    (128,)\n```\n"
  fullName: cntk.layers.higher_order_layers.For
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: For
  source:
    id: For
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 95
  summary: 'Layer factory function to create a composite through a pattern similar
    to Python''s *for* statement.


    This layer factory loops over the given range and passes each value to the constructor
    function.

    It is equivalent to

    `Sequential([constructor(i) for i in what_range])`.


    It is acceptable that `constructor` takes no argument.

    '
  syntax:
    content: For(what_range, constructor, name='')
    parameters:
    - description: 'a Python range to loop over

        '
      id: what_range
      type:
      - range
    - description: 'lambda that constructs a layer

        '
      id: constructor
      type:
      - Python function/lambda with 1 or 0 arguments
    - defaultValue: ''
      id: name
    return:
      description: 'A function that accepts one argument and applies the layers as
        constructed by `constructor` one after another.

        '
      type:
      - cntk.ops.functions.Function
  type: function
  uid: cntk.layers.higher_order_layers.For
- fullName: cntk.layers.higher_order_layers.LayerStack
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: LayerStack
  source:
    id: LayerStack
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 163
  syntax:
    content: LayerStack(N, constructor)
    parameters:
    - id: N
    - id: constructor
  type: function
  uid: cntk.layers.higher_order_layers.LayerStack
- example:
  - '

    ```


    >>> # a ResNet layer

    >>> from cntk.layers import *

    >>> from cntk.ops import relu

    >>> resnet_layer = Sequential([ResNetBlock(Convolution((3,3), 64, activation=None)),
    relu])

    ```

    '
  fullName: cntk.layers.higher_order_layers.ResNetBlock
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: ResNetBlock
  source:
    id: ResNetBlock
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 192
  summary: 'Layer factory function to create a composite that adds a skip connection
    to a function.

    This is equivalent to `Sequential((f, identity), plus)`.

    '
  syntax:
    content: ResNetBlock(f, name='')
    parameters:
    - description: 'the function to add the skip connection to.

        '
      id: f
      type:
      - "cntk.ops.functions.Function\n or equivalent Python function"
    - defaultValue: ''
      id: name
    return:
      description: 'A function that accepts one argument, applies `f` to it, and adds
        the original argument.

        '
      type:
      - cntk.ops.functions.Function
  type: function
  uid: cntk.layers.higher_order_layers.ResNetBlock
- example:
  - "\n```\n\n>>> from cntk.layers import *\n```\n\n\n```\n\n>>> # sequence classifier.\
    \ Maps a one-hot word sequence to a scalar probability value.\n>>> # The recurrence\
    \ is a Fold(), meaning only the final hidden state is produced.\n>>> # The Label()\
    \ layer allows to access the final hidden layer by name.\n>>> model = Sequential([Embedding(300),\
    \ Fold(LSTM(500)), Label('hidden'), Dense(1, activation=sigmoid)])\n>>> model.update_signature(Sequence[Tensor[30000]])\n\
    >>> model.hidden.shape\n    (500,)\n```\n\n\n```\n\n>>> # simple example that\
    \ squares an input value\n>>> f = Sequential([log, lambda x: 2 * x, exp])  # the\
    \ second function is a Python lambda\n>>> f.update_signature(1)\n>>> f([np.array([2])])\
    \     # log, times 2, exp is the same as computing the square\n    array([[ 4.]],\
    \ dtype=float32)\n```\n\n\n```\n\n>>> # using function tuples to implement a bidirectional\
    \ LSTM\n>>> bi_lstm = Sequential([(Recurrence(LSTM(250)),                    \
    \  # first tuple entry: forward pass\n...                        Recurrence(LSTM(250),\
    \ go_backwards=True)),  # second: backward pass\n...                       splice])\
    \                                     # splice both on top of each other\n```\n\
    \n\n```\n\n>>> # using function tuple to implement a ResNet block\n>>> # The function\
    \ tuple applies all items to the input, and emits a tuple with the results\n>>>\
    \ # that then act as the arguments to the next one.\n>>> # Here we say (Convolution(),\
    \ identity), which generates two arguments to the next function,\n>>> # the first\
    \ being the convolution, the second being the input passed through.\n>>> # Following\
    \ that with plus() implements the ResNet formula.\n>>> from cntk.ops import plus,\
    \ relu\n>>> resnet_layer = Sequential([(Convolution((3,3), 64, activation=None),\
    \ # first tuple entry\n...                             identity),            \
    \                   # second tuple entry is a pass-through\n...              \
    \              plus,                                     # this sums both\n...\
    \                            relu])                                    # activation\
    \ applied afterwards\n```\n\n\n```\n\n>>> # simple function-tuples example with\
    \ values\n>>> f = Sequential([(lambda x: x * x, identity), splice])  # computes\
    \ tuple (x^2, x) and splices both values\n>>> f.update_signature(1)\n>>> f([np.array([2])])\n\
    \    array([[ 4.,  2.]], dtype=float32)\n```\n"
  fullName: cntk.layers.higher_order_layers.Sequential
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: Sequential
  source:
    id: Sequential
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 20
  summary: 'Layer factory function to create a composite that applies a sequence of
    layers (or any functions) onto an input.

    `Sequential ([F, G, H])(x)` means the same as `H(G(F(x)))`.


    The list of functions may also include tuples of functions. In that case, each
    function

    in a tuple is applied to the input, and the result is a tuple containing the results
    of

    these function applications. If followed by another function (typ. `plus` or `splice`),

    the tuple items form the arguments to that function.


    Intermediate values in the chain can be accessed by name by inserting a `Label(name=...)`
    layer.


    Note: An equivalent way of writing `Sequential ([F, G, H])(x)` is `F >> G >> H`.

    '
  syntax:
    content: Sequential(layers, name='')
    parameters:
    - description: 'the list of functions to apply in sequence.

        A tuple aplies each of its items to the input and results in a tuple value.

        An item that is a list will be flattened.

        '
      id: layers
      type:
      - 'list of @cntk.ops.functions.Function

        , equivalent Python functions, tuples of functions, or lists thereof'
    - defaultValue: ''
      id: name
    return:
      description: 'A function that accepts one argument and applies the given `functions`
        one after another.

        '
      type:
      - cntk.ops.functions.Function
  type: function
  uid: cntk.layers.higher_order_layers.Sequential
- fullName: cntk.layers.higher_order_layers.SequentialClique
  langs:
  - python
  module: cntk.layers.higher_order_layers
  name: SequentialClique
  source:
    id: SequentialClique
    path: bindings/python/cntk\layers\higher_order_layers.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\layers\higher_order_layers.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 170
  summary: 'Layer factory function to create a composite that applies a sequence of
    or any functions onto an input,

    with skip connections between all function. I.e. each function receives a sum
    of the input and all

    prior functions'' outputs.

    '
  syntax:
    content: SequentialClique(functions, name='')
    parameters:
    - id: functions
    - defaultValue: ''
      id: name
  type: function
  uid: cntk.layers.higher_order_layers.SequentialClique
references:
- fullName: cntk.layers.higher_order_layers.For
  isExternal: false
  name: For
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.For
- fullName: cntk.layers.higher_order_layers.LayerStack
  isExternal: false
  name: LayerStack
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.LayerStack
- fullName: cntk.layers.higher_order_layers.ResNetBlock
  isExternal: false
  name: ResNetBlock
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.ResNetBlock
- fullName: cntk.layers.higher_order_layers.Sequential
  isExternal: false
  name: Sequential
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.Sequential
- fullName: cntk.layers.higher_order_layers.SequentialClique
  isExternal: false
  name: SequentialClique
  parent: cntk.layers.higher_order_layers
  uid: cntk.layers.higher_order_layers.SequentialClique
