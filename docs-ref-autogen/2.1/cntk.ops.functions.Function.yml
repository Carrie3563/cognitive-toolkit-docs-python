### YamlMime:UniversalReference
api_name: []
items:
- children:
  - cntk.ops.functions.Function.argument_map
  - cntk.ops.functions.Function.arguments
  - cntk.ops.functions.Function.attributes
  - cntk.ops.functions.Function.backward
  - cntk.ops.functions.Function.block_arguments_mapping
  - cntk.ops.functions.Function.block_root
  - cntk.ops.functions.Function.clone
  - cntk.ops.functions.Function.constants
  - cntk.ops.functions.Function.declare_args
  - cntk.ops.functions.Function.eval
  - cntk.ops.functions.Function.find_all_with_name
  - cntk.ops.functions.Function.find_by_name
  - cntk.ops.functions.Function.forward
  - cntk.ops.functions.Function.grad
  - cntk.ops.functions.Function.inputs
  - cntk.ops.functions.Function.is_block
  - cntk.ops.functions.Function.is_composite
  - cntk.ops.functions.Function.is_primitive
  - cntk.ops.functions.Function.load
  - cntk.ops.functions.Function.name
  - cntk.ops.functions.Function.op_name
  - cntk.ops.functions.Function.output
  - cntk.ops.functions.Function.outputs
  - cntk.ops.functions.Function.parameters
  - cntk.ops.functions.Function.placeholders
  - cntk.ops.functions.Function.replace_placeholder
  - cntk.ops.functions.Function.replace_placeholders
  - cntk.ops.functions.Function.restore
  - cntk.ops.functions.Function.restore_model
  - cntk.ops.functions.Function.root_function
  - cntk.ops.functions.Function.save
  - cntk.ops.functions.Function.save_model
  - cntk.ops.functions.Function.signature
  - cntk.ops.functions.Function.type
  - cntk.ops.functions.Function.uid
  - cntk.ops.functions.Function.update_signature
  class: cntk.ops.functions.Function
  example:
  - '

    ```


    >>> @Function

    ... def f(x):

    ...     return x * x

    >>> from cntk import debugging

    >>> debugging.dump_signature(f)

    Function(x: Sequence[tensor]) -> Sequence[tensor]

    ```

    '
  fullName: cntk.ops.functions.Function
  inheritance:
  - inheritance:
    - inheritance:
      - type: builtins.object
      type: cntk.cntk_py.IDictionarySerializable
    type: cntk.cntk_py.Function
  langs:
  - python
  module: cntk.ops.functions
  name: Function
  source:
    id: Function
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 36
  summary: "Base class of all primitive tensor operators.\n\nIf it has only one output,\
    \ one can invoke Variable methods on it, which it\nwill relay to its only output.\n\
    \n*Function* objects can also be constructed directly from a Python lambda,\n\
    by means of the *@Function* decorator.\nThe *Function*'s input signature is defined\
    \ by the lambda.\n\nThe above form creates a CNTK Function whose arguments are\
    \ placeholder variables.\nSuch a function can only be combined with other symbolic\
    \ functions.\n\nTo train a Function or pass data to it, you need to declare the\
    \ types\nof the arguments. In this case, the @Function decorator creates a CNTK\
    \ Function\nwhose arguments are input variables.\n\nIf you use Python 3, Functions\
    \ with types are declared using Python annotation syntax, e.g.:\n\n<!-- literal_block\
    \ {\"names\": [], \"classes\": [], \"ids\": [], \"dupnames\": [], \"xml:space\"\
    : \"preserve\", \"backrefs\": []} -->\n\n````\n\n   @Function\n   def f(x:Tensor[13]):\n\
    \       return x * x\n   ````\n\nIf you are working with Python 2.7, use CNTK's\
    \ *@:class:~cntk.layers.typing.Signature* decorator instead:\n\n<!-- literal_block\
    \ {\"names\": [], \"classes\": [], \"ids\": [], \"dupnames\": [], \"xml:space\"\
    : \"preserve\", \"backrefs\": []} -->\n\n````\n\n   >>> from cntk.layers.typing\
    \ import *\n   >>> @Function\n   ... @Signature(Tensor[13])\n   ... def f(x):\n\
    \   ...     return x * x\n   >>> debugging.dump_signature(f)\n   Function(x: Tensor[13])\
    \ -> Tensor[13]\n   ````\n\n`make_block=True` is an internal parameter used to\
    \ implement *@:func:~cntk.layers.blocks.BlockFunction()*.\nIf *BlockFunction()*\
    \ passes *True`*, then the result will be wrapped\nin :func:`~cntk.ops.as_block()`,\
    \ using the supplied `op_name` and `name` parameters, which are otherwise ignored.\n\
    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
  syntax:
    content: Function(*args, **kwargs)
  type: class
  uid: cntk.ops.functions.Function
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.argument_map
  langs:
  - python
  module: cntk.ops.functions
  name: argument_map
  source:
    id: argument_map
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 227
  summary: 'determine the {placeholder: variable} map for use with various call operations

    Returns a dictionary from this function''s placeholders to whatever arguments
    are passed.

    Accepted are both positional and keyword arguments.

    This mimics Python''s argument interpretation, except that keyword arguments are
    not optional.

    This does not require the arguments to be Variables or Functions. It is also called
    by train_minibatch().

    '
  syntax:
    content: argument_map(*args, **kwargs)
    parameters:
    - id: self
  type: method
  uid: cntk.ops.functions.Function.argument_map
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.arguments
  langs:
  - python
  module: cntk.ops.functions
  name: arguments
  source:
    id: arguments
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of all input variables of the Function that are not of type Parameter
    or Constant

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.arguments
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.attributes
  langs:
  - python
  module: cntk.ops.functions
  name: attributes
  source:
    id: attributes
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of the attributes of the function

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.attributes
- class: cntk.ops.functions.Function
  example:
  - '

    ```


    >>> # compute the value and the derivative of the sigmoid at 0

    >>> v = C.input(shape=(1,), needs_gradient=True)

    >>> f = C.sigmoid(v)

    >>> df, fv = f.forward({v:[[0]]}, [f.output], set([f.output]))

    >>> value = list(fv.values())[0]

    >>> grad = f.backward(df, {f.output: np.ones_like(value)}, set([v]))

    >>> value

    array([[ 0.5]], dtype=float32)

    >>> list(grad.values())[0]

    array([[ 0.25]], dtype=float32)

    ```

    '
  fullName: cntk.ops.functions.Function.backward
  langs:
  - python
  module: cntk.ops.functions
  name: backward
  source:
    id: backward
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 678
  summary: "Backpropagates supplied `root_gradients` for one or more of the output\n\
    variables of the Function, to calculate gradients with respect to\n`variables`.\
    \ Formally, multiplies the values of `root_gradients` by\nthe Jacobian of the\
    \ Function and returns the subset of the output that\ncorresponds to `variables`.\n\
    \nNote: See @cntk.ops.functions.Function.forward for more examples on passing\
    \ input data. \n"
  syntax:
    content: backward(state, root_gradients, variables, as_numpy=True)
    return:
      description: 'mapping of `variables` to NumPy arrays

        '
      type:
      - dict
  type: method
  uid: cntk.ops.functions.Function.backward
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.block_arguments_mapping
  langs:
  - python
  module: cntk.ops.functions
  name: block_arguments_mapping
  source:
    id: block_arguments_mapping
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns the mapping from the arguments of the composite underlying this
    block function

    to the Variables that they are bound to in the outer graph of Functions that this

    block Function is part of.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.block_arguments_mapping
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.block_root
  langs:
  - python
  module: cntk.ops.functions
  name: block_root
  source:
    id: block_root
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns the root of the Function graph underlying this block Function.

    Throws an exception if this is not a block Function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.block_root
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.clone
  langs:
  - python
  module: cntk.ops.functions
  name: clone
  source:
    id: clone
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 444
  summary: 'Clones the function. The parameters of the Function are either cloned,

    shared or frozen as specified by the method argument and any variable

    substitutions requested are applied in the cloned Function instance.

    '
  syntax:
    content: clone(method, substitutions=None)
    parameters:
    - description: "one of\n\n* 'clone': the returned function gets its own copy of\
        \ parameters (default) \n\n* 'share': the returned function shares its parameters\
        \ with this function \n\n* 'freeze': parameters are cloned and made immutable\
        \ (constant). \n"
      id: method
      type:
      - cntk.ops.functions.CloneMethod
    - description: 'a dictionary mapping variables in this

        function to variables in the cloned function

        '
      id: substitutions
      type:
      - dict
    return:
      description: 'the cloned Function

        '
      type:
      - cntk.ops.functions.Function
  type: method
  uid: cntk.ops.functions.Function.clone
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.constants
  langs:
  - python
  module: cntk.ops.functions
  name: constants
  source:
    id: constants
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of all *Constant* variables of this @cntk.ops.functions.Function

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.constants
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.declare_args
  langs:
  - python
  module: cntk.ops.functions
  name: declare_args
  source:
    id: declare_args
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 268
  summary: 'Back-compat wrapper for update_signature() (beta12 and before).

    '
  syntax:
    content: declare_args(*arg_types)
    parameters:
    - id: self
  type: method
  uid: cntk.ops.functions.Function.declare_args
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.eval
  langs:
  - python
  module: cntk.ops.functions
  name: eval
  source:
    id: eval
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 484
  summary: "Evaluate the Function's outputs using the specified `arguments` as input.\n\
    \nNote: See @cntk.ops.functions.Function.forward for examples on passing input\
    \ data. \n"
  syntax:
    content: eval(arguments=None, outputs=None, device=None, as_numpy=True)
    parameters:
    - id: self
    - defaultValue: None
      id: arguments
    - defaultValue: None
      id: outputs
    - defaultValue: None
      id: device
    - defaultValue: 'True'
      id: as_numpy
    return:
      description: 'Dict with keys of ouput variable names and values of

        output variable. A single NumPy array if there is only one output value.

        '
      type:
      - dict
      - NumPy Array
  type: method
  uid: cntk.ops.functions.Function.eval
- class: cntk.ops.functions.Function
  example:
  - '

    ```


    >>> a = C.input(shape=1, name=''i'')

    >>> b = C.input(shape=1, name=''i'')

    >>> c = C.plus(a, b, name=''c'')

    >>> len(c.find_all_with_name(''i''))

    2

    >>> c.find_all_with_name(''z'')

    []

    ```

    '
  fullName: cntk.ops.functions.Function.find_all_with_name
  langs:
  - python
  module: cntk.ops.functions
  name: find_all_with_name
  seealsoContent: "See also: @cntk.ops.functions.find_by_name \n"
  source:
    id: find_all_with_name
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 962
  summary: 'Returns a list of primitive function with `name` in the graph

    starting from this node. Throws an exception if `name` occurs

    multiple times. If you expect only one function to be returned, use

    @cntk.ops.functions.find_by_name.

    '
  syntax:
    content: find_all_with_name(name, depth=0)
    parameters:
    - description: 'names to look for

        '
      id: name
      type:
      - str
    - description: 'how deep into the block hierarchy the DFS

        algorithm should go into. Set to -1 for infinite depth.

        '
      id: depth
      type:
      - int, default 0
    return:
      description: 'list of @cntk.ops.functions.Function objects matching `name`

        '
  type: method
  uid: cntk.ops.functions.Function.find_all_with_name
- class: cntk.ops.functions.Function
  example:
  - '

    ```


    >>> a = C.input(shape=1, name=''a'')

    >>> b = C.input(shape=1, name=''b'')

    >>> c = C.plus(a, b, name=''c'')

    >>> print(c.find_by_name(''b'').name)

    b

    >>> c.find_by_name(''z'') is None

    True

    ```


    If you need a full function out of it that can be evaluated, you

    need to upcast it (currently done via combine):

    ```


    >>> d = c * 5

    >>> C.combine([d.find_by_name(''c'')]).eval({a:[[1]], b:[[2]]})

    array([[ 3.]], dtype=float32)

    ```

    '
  fullName: cntk.ops.functions.Function.find_by_name
  langs:
  - python
  module: cntk.ops.functions
  name: find_by_name
  seealsoContent: "See also: @cntk.ops.functions.Function.find_all_with_name \n"
  source:
    id: find_by_name
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 994
  summary: 'Returns a primitive function with `name` in the graph starting from

    this node. Throws an exception if `name` occurs multiple times. If

    you expect multiple functions to be returned, use

    @cntk.ops.functions.Function.find_all_with_name.

    '
  syntax:
    content: find_by_name(name, depth=0)
    parameters:
    - description: 'names to look for

        '
      id: name
      type:
      - str
    - description: 'how deep into the block hierarchy the DFS

        algorithm should go into. Set to -1 for infinite depth.

        '
      id: depth
      type:
      - int, default 0
    return:
      description: '@cntk.ops.functions.Function object matching `name`

        '
  type: method
  uid: cntk.ops.functions.Function.find_by_name
- class: cntk.ops.functions.Function
  example:
  - "\n```\n\n>>> # Doing the same, but with a CSR matrix from scipy.sparse\n>>> vocab_size\
    \ = 5\n>>> from scipy.sparse import csr_matrix\n>>> v = C.sequence.input(shape=(vocab_size,),\
    \ is_sparse=True)\n>>> f = C.times(v, np.eye(vocab_size))\n>>> # Note that csr_matrix\
    \ automatically uses a sparse representation underneath.\n>>> sparse_batch = [csr_matrix([[0,1,0,0,0]]),\
    \ csr_matrix([[0,0,1,0,0], [0,0,0,0,1]])]\n>>> _, fv = f.forward({v:sparse_batch})\n\
    >>> list(fv.values())[0]\n[array([[ 0.,  1.,  0.,  0.,  0.]], dtype=float32),\n\
    \ array([[ 0.,  0.,  1.,  0.,  0.], [ 0.,  0.,  0.,  0.,  1.]], dtype=float32)]\n\
    <BLANKLINE>\n>>> # Much more efficient, however, is to incrementally create CSR\
    \ arrays.\n>>> # See https://docs.scipy.org/doc/scipy/reference/generated/scipy.sparse.csr_matrix.html\n\
    >>> # for more information.\n>>> def seq_to_csr_matrix(seq, vocab_size):\n...\
    \     indptr = [0]\n...     indices = []\n...     data = []\n...     for term_idx\
    \ in seq:\n...         indices.append(term_idx)\n...         data.append(1)\n\
    ...         indptr.append(len(indices))\n...     return csr_matrix((data, indices,\
    \ indptr), shape=(len(seq), vocab_size))\n>>> sparse_batch = [seq_to_csr_matrix(seq,\
    \ vocab_size) for seq in batch]\n>>> _, fv = f.forward({v:sparse_batch})\n>>>\
    \ list(fv.values())[0]\n[array([[ 0.,  1.,  0.,  0.,  0.]], dtype=float32),\n\
    \ array([[ 0.,  0.,  1.,  0.,  0.], [ 0.,  0.,  0.,  0.,  1.]], dtype=float32)]\n\
    ```\n"
  fullName: cntk.ops.functions.Function.forward
  langs:
  - python
  module: cntk.ops.functions
  name: forward
  source:
    id: forward
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 544
  summary: 'Computes the values of speficied variables in `outputs`, using values

    provided in `arguments` that correspond to each input *Variable* of

    the function (i.e. those that have `is_input = True`).

    '
  syntax:
    content: forward(arguments, outputs=None, keep_for_backward=None, device=None,
      as_numpy=True)
    parameters:
    - description: "maps variables to their input data. The interpretation depends\
        \ on\nthe input type:\n\n   * dict: keys are input variable or names, and\
        \ values are the input data. To specify a minibatch, provide a list of arrays.\
        \ The shape of each array must be compatible with the shape of the dictionary\
        \ key. If the array denotes a sequence then the elements of the sequence are\
        \ grouped along axis 0. \n\n   * any other type: if node has an unique input,\
        \ arguments is mapped to this input. \n\nFor nodes with more than one input,\
        \ only dict is allowed.\n\nIn both cases, every sample in the data will be\
        \ interpreted\nas a new sequence.\n\nSequences can be marked as continuations\
        \ of the same sequence in\nthe previous minibatch (that is the sequence in\
        \ the same slot).\nThere are two possibilities for this:\n\n   * specifying\
        \ arguments as a *tuple* where the first element is used as arguments and\
        \ the second one will be used as a list of bools, denoting whether a sequence\
        \ is a new one (*True*) or a continuation of the sequence in the same slot\
        \ of the previous minibatch (*False*). This will be applied to all batches.\
        \ \n\n   * specifying arguments as a dictionary of variables to tuples where\
        \ the first element is used as arguments and the second one will be used as\
        \ a list of bools, denoting whether a sequence is a new one (*True*) or a\
        \ continuation of the sequence in the same slot of the previous minibatch\
        \ (*False*). This will be applied to all batches. \n\nData should be either\
        \ NumPy arrays or a\n@cntk.io.MinibatchData instance.\n"
      id: arguments
    - description: 'outputs to fetch values for. If not

        set, all outputs of the function will be fetched.

        '
      id: outputs
      type:
      - iterable, optional
    - description: 'the subset of the

        Function''s output variables for which gradients shall be calculated

        in a subsequent backward call. If *None*, the returned state will

        be *None* and a subsequent call to @cntk.ops.functions.Function.backward will
        not be

        possible.

        '
      id: keep_for_backward
      type:
      - set, default None
    - description: 'the device

        descriptor that contains the type and id of the device on which the

        computation is. If *None*, the default device is used.

        '
      id: device
      type:
      - 'cntk.device.DeviceDescriptor

        , default None'
    - description: 'whether to return the result as a NumPy array. Default True.

        Specifying this as False returns a CNTK Value which avoids a

        costly conversion but returns a somewhat opaque object.

        '
      id: as_numpy
      type:
      - bool
    return:
      description: 'A tuple (BackPropState, map of outputs to NumPy arrays). The

        BackPropState is a handle taken by @cntk.ops.functions.Function.backward.

        '
  type: method
  uid: cntk.ops.functions.Function.forward
- class: cntk.ops.functions.Function
  example:
  - "\n```\n\n>>> x = C.input(shape=(1,), needs_gradient=True)\n>>> y = C.sqrt(x)\n\
    >>> a = np.asarray([1,4,16],dtype=np.float32).reshape(3,1)\n>>> y.grad({x:a})\n\
    array([[ 0.5  ],\n<BLANKLINE>\n       [ 0.25 ],\n<BLANKLINE>\n       [ 0.125]],\
    \ dtype=float32)\n```\n"
  fullName: cntk.ops.functions.Function.grad
  langs:
  - python
  module: cntk.ops.functions
  name: grad
  source:
    id: grad
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 731
  summary: 'Computes the gradient of this Function at location `at` with respect to
    `wrt`.

    The Function must have a single output.

    '
  syntax:
    content: grad(at, wrt=None, outputs=None, device=None, as_numpy=True)
    parameters:
    - description: 'mapping of the Function''s arguments to values

        '
      id: at
      type:
      - dict
    - description: 'list of Variables with respect to which the

        gradient will be computed. If omitted, the gradients with

        respect to all arguments of this Function that need gradient will be computed.

        '
      id: wrt
      type:
      - list, default None
    - description: 'outputs (including intermediate outputs in the graph)

        to fetch values for. If not specified, values for none of the outputs are
        fetched.

        '
      id: outputs
      type:
      - iterable, optional
    - description: 'the device

        descriptor that contains the type and id of the device on which the

        computation is performed. If *None*, the default device is used.

        '
      id: device
      type:
      - 'cntk.device.DeviceDescriptor

        , default None'
    - description: 'whether to return the gradients as a NumPy array. Default True.

        Specifying this as False returns a CNTK Value which avoids a

        costly conversion but returns a somewhat opaque object.

        '
      id: as_numpy
      type:
      - bool, default True
    return:
      description: "Dict with keys of `wrt` variables and gradient values of\n   `wrt`\
        \ variables. A single NumPy array if there is only one gradient value.\n \
        \  If `outputs` were specified (to fetch values for), this method returns\
        \ a tuple where the 2nd element\n   of the tuple is the `outputs` values;\
        \ a dict with keys of specified `outputs` variables and\n   values of computed\
        \ `outputs`, or a single NumPy array if there is only one output value.\n\
        \   Each element has the same shape as the `wrt` or `outputs` variables including\
        \ dynamic axes\n   (such as the batch axis).\n"
      type:
      - dict
      - NumPy Array
      - a tuple of these
  type: method
  uid: cntk.ops.functions.Function.grad
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.inputs
  langs:
  - python
  module: cntk.ops.functions
  name: inputs
  source:
    id: inputs
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of all input variables of this function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.inputs
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.is_block
  langs:
  - python
  module: cntk.ops.functions
  name: is_block
  source:
    id: is_block
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns a boolean indicating if this Function is a block function which
    is basically

    a composite encapsulated as an opaque block which appears as a primitive during

    traversing the graph of Functions that this block is part of.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.is_block
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.is_composite
  langs:
  - python
  module: cntk.ops.functions
  name: is_composite
  source:
    id: is_composite
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns a boolean indicating if this Function is a composite Function.

    A composite Function is a Function that is composed of primitive Functions.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.is_composite
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.is_primitive
  langs:
  - python
  module: cntk.ops.functions
  name: is_primitive
  source:
    id: is_primitive
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns a boolean indicating if this Function is a primitive Function.

    A primitive Function is the lowest level building block for composite Function

    graphs and is either a CNTK built-in operator, a composite Function encapsulated

    as a Block or a user-defined Function

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.is_primitive
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.load
  langs:
  - python
  module: cntk.ops.functions
  name: load
  source:
    id: load
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 1071
  summary: 'Load the model in `filename`, that has been saved using

    @cntk.ops.functions.Function.save.

    '
  syntax:
    content: load(filename, device=None)
    parameters:
    - description: 'filename to load the model from

        '
      id: filename
      type:
      - str
    - description: 'instance of DeviceDescriptor

        '
      id: device
      type:
      - 'cntk.device.DeviceDescriptor

        , default is the default device'
    return:
      description: 'root node

        '
  type: method
  uid: cntk.ops.functions.Function.load
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.name
  langs:
  - python
  module: cntk.ops.functions
  name: name
  source:
    id: name
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Name of this function

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.name
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.op_name
  langs:
  - python
  module: cntk.ops.functions
  name: op_name
  source:
    id: op_name
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Name of the operation that this Function performs

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.op_name
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.output
  langs:
  - python
  module: cntk.ops.functions
  name: output
  source:
    id: output
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'The single output variable if there is only one, or raises an exception.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.output
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.outputs
  langs:
  - python
  module: cntk.ops.functions
  name: outputs
  source:
    id: outputs
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List consisting of all output variables of this function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.outputs
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.parameters
  langs:
  - python
  module: cntk.ops.functions
  name: parameters
  source:
    id: parameters
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of all parameter variables of this function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.parameters
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.placeholders
  langs:
  - python
  module: cntk.ops.functions
  name: placeholders
  source:
    id: placeholders
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'List of all placeholders variables of this function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.placeholders
- class: cntk.ops.functions.Function
  exceptions:
  - description: 'when the function has multiple placeholders.

      '
    type: Exception
  fullName: cntk.ops.functions.Function.replace_placeholder
  langs:
  - python
  module: cntk.ops.functions
  name: replace_placeholder
  source:
    id: replace_placeholder
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 945
  summary: 'In-place replace the only placeholder in the function graph with the

    specified substitution.

    '
  syntax:
    content: replace_placeholder(substitution)
    parameters:
    - description: 'the variable

        that will replace the placeholder

        '
      id: substitution
      type:
      - cntk.variables.Variable
    return:
      description: 'itself

        '
      type:
      - cntk.ops.functions.Function
  type: method
  uid: cntk.ops.functions.Function.replace_placeholder
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.replace_placeholders
  langs:
  - python
  module: cntk.ops.functions
  name: replace_placeholders
  source:
    id: replace_placeholders
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 928
  summary: 'In-place replace specified placeholders in the Function graph with the

    specified replacements in the map.

    '
  syntax:
    content: replace_placeholders(substitutions)
    parameters:
    - description: 'map from placeholder to variables

        '
      id: substitutions
      type:
      - dict
    return:
      description: 'itself

        '
      type:
      - cntk.ops.functions.Function
  type: method
  uid: cntk.ops.functions.Function.replace_placeholders
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.restore
  langs:
  - python
  module: cntk.ops.functions
  name: restore
  source:
    id: restore
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 1052
  summary: 'Restore the models parameters (in-place) from a saved model file

    '
  syntax:
    content: restore(filename)
    parameters:
    - description: 'saved model path

        '
      id: filename
      type:
      - str
    return:
      description: 'this method only has the side-effect of loading the model parameters
        from the file

        '
      type:
      - '*None*'
  type: method
  uid: cntk.ops.functions.Function.restore
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.restore_model
  langs:
  - python
  module: cntk.ops.functions
  name: restore_model
  source:
    id: restore_model
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 1065
  syntax:
    content: restore_model(filename)
    parameters:
    - id: self
    - id: filename
  type: method
  uid: cntk.ops.functions.Function.restore_model
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.root_function
  langs:
  - python
  module: cntk.ops.functions
  name: root_function
  source:
    id: root_function
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'The primitive function at the root of the graph of functions underlying
    this function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.root_function
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.save
  langs:
  - python
  module: cntk.ops.functions
  name: save
  source:
    id: save
    path: bindings/python/cntk\internal\swig_helper.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\internal\swig_helper.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 1032
  summary: 'Save this function graph into a model file using protobuf-based

    serialization.


    Use distributed.Communicator.is_main() to gate your call to save()

    in distributed environment.

    '
  syntax:
    content: save(filename)
    parameters:
    - description: 'model path

        '
      id: filename
      type:
      - str
  type: method
  uid: cntk.ops.functions.Function.save
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.save_model
  langs:
  - python
  module: cntk.ops.functions
  name: save_model
  source:
    id: save_model
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 1046
  syntax:
    content: save_model(filename)
    parameters:
    - id: self
    - id: filename
  type: method
  uid: cntk.ops.functions.Function.save_model
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.signature
  langs:
  - python
  module: cntk.ops.functions
  name: signature
  source:
    id: signature
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Returns the signature of a Function.

    This is the .arguments[] list without placeholders that belong to an outer, not
    yet completed @Function def.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.signature
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.type
  langs:
  - python
  module: cntk.ops.functions
  name: type
  source:
    id: type
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'Get type of a Function''s output.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.type
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.uid
  langs:
  - python
  module: cntk.ops.functions
  name: uid
  source:
    id: uid
    path: null
    remote:
      branch: release/2.0.rc1
      path: null
      repo: https://github.com/Microsoft/CNTK.git
    startLine: null
  summary: 'The internally generated unique name of the function.

    '
  syntax: {}
  type: attribute
  uid: cntk.ops.functions.Function.uid
- class: cntk.ops.functions.Function
  fullName: cntk.ops.functions.Function.update_signature
  langs:
  - python
  module: cntk.ops.functions
  name: update_signature
  source:
    id: update_signature
    path: bindings/python/cntk\ops\functions.py
    remote:
      branch: release/2.0.rc1
      path: bindings/python/cntk\ops\functions.py
      repo: https://github.com/Microsoft/CNTK.git
    startLine: 241
  summary: 'define input shapes, in-place

    e.g.

    model.update_signature(42)

    pass a list of objects that define the dimensions etc. of the placeholders

    Currently you can pass an int, a tuple, an Input, or a dict created with Type()

    '
  syntax:
    content: update_signature(*arg_types, **kwarg_types)
    parameters:
    - id: self
  type: method
  uid: cntk.ops.functions.Function.update_signature
references:
- fullName: cntk.ops.functions.Function.argument_map
  isExternal: false
  name: argument_map
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.argument_map
- fullName: cntk.ops.functions.Function.arguments
  isExternal: false
  name: arguments
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.arguments
- fullName: cntk.ops.functions.Function.attributes
  isExternal: false
  name: attributes
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.attributes
- fullName: cntk.ops.functions.Function.backward
  isExternal: false
  name: backward
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.backward
- fullName: cntk.ops.functions.Function.block_arguments_mapping
  isExternal: false
  name: block_arguments_mapping
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.block_arguments_mapping
- fullName: cntk.ops.functions.Function.block_root
  isExternal: false
  name: block_root
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.block_root
- fullName: cntk.ops.functions.Function.clone
  isExternal: false
  name: clone
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.clone
- fullName: cntk.ops.functions.Function.constants
  isExternal: false
  name: constants
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.constants
- fullName: cntk.ops.functions.Function.declare_args
  isExternal: false
  name: declare_args
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.declare_args
- fullName: cntk.ops.functions.Function.eval
  isExternal: false
  name: eval
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.eval
- fullName: cntk.ops.functions.Function.find_all_with_name
  isExternal: false
  name: find_all_with_name
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.find_all_with_name
- fullName: cntk.ops.functions.Function.find_by_name
  isExternal: false
  name: find_by_name
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.find_by_name
- fullName: cntk.ops.functions.Function.forward
  isExternal: false
  name: forward
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.forward
- fullName: cntk.ops.functions.Function.grad
  isExternal: false
  name: grad
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.grad
- fullName: cntk.ops.functions.Function.inputs
  isExternal: false
  name: inputs
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.inputs
- fullName: cntk.ops.functions.Function.is_block
  isExternal: false
  name: is_block
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.is_block
- fullName: cntk.ops.functions.Function.is_composite
  isExternal: false
  name: is_composite
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.is_composite
- fullName: cntk.ops.functions.Function.is_primitive
  isExternal: false
  name: is_primitive
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.is_primitive
- fullName: cntk.ops.functions.Function.load
  isExternal: false
  name: load
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.load
- fullName: cntk.ops.functions.Function.name
  isExternal: false
  name: name
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.name
- fullName: cntk.ops.functions.Function.op_name
  isExternal: false
  name: op_name
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.op_name
- fullName: cntk.ops.functions.Function.output
  isExternal: false
  name: output
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.output
- fullName: cntk.ops.functions.Function.outputs
  isExternal: false
  name: outputs
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.outputs
- fullName: cntk.ops.functions.Function.parameters
  isExternal: false
  name: parameters
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.parameters
- fullName: cntk.ops.functions.Function.placeholders
  isExternal: false
  name: placeholders
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.placeholders
- fullName: cntk.ops.functions.Function.replace_placeholder
  isExternal: false
  name: replace_placeholder
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.replace_placeholder
- fullName: cntk.ops.functions.Function.replace_placeholders
  isExternal: false
  name: replace_placeholders
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.replace_placeholders
- fullName: cntk.ops.functions.Function.restore
  isExternal: false
  name: restore
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.restore
- fullName: cntk.ops.functions.Function.restore_model
  isExternal: false
  name: restore_model
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.restore_model
- fullName: cntk.ops.functions.Function.root_function
  isExternal: false
  name: root_function
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.root_function
- fullName: cntk.ops.functions.Function.save
  isExternal: false
  name: save
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.save
- fullName: cntk.ops.functions.Function.save_model
  isExternal: false
  name: save_model
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.save_model
- fullName: cntk.ops.functions.Function.signature
  isExternal: false
  name: signature
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.signature
- fullName: cntk.ops.functions.Function.type
  isExternal: false
  name: type
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.type
- fullName: cntk.ops.functions.Function.uid
  isExternal: false
  name: uid
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.uid
- fullName: cntk.ops.functions.Function.update_signature
  isExternal: false
  name: update_signature
  parent: cntk.ops.functions.Function
  uid: cntk.ops.functions.Function.update_signature
